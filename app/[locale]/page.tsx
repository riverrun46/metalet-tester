"use client";

import { useEffect, useState } from "react";
import { useLocale, useTranslations } from "next-intl";
import Link from "next/link";
// @ts-ignore
import mvc from "mvc-lib";

import cases from "@/app/data/cases";

export default function Home() {
  const t = useTranslations("Index");
  const locale = useLocale();
  const theOther = locale === "en" ? "中" : "EN";
  const theOtherPath = locale === "en" ? "/zh" : "/en";

  const [wallet, setWallet] = useState<any | null>(null);
  useEffect(() => {
    setWallet(window.metaidwallet);
  }, []);

  const [consoleMessages, setConsoleMessages] = useState<string[]>([]);
  const clearConsole = () => {
    setConsoleMessages([]);
    console.clear();
  };

  const [rawTxs, setRawTxs] = useState<string[]>([]);

  const command = async (cmd: string, params?: any) => {
    // 打印命令到控制台消息
    const name = t(cmd);
    const newMessage = locale === "en" ? `> ${name}...` : `> ${name}中……`;
    setConsoleMessages((prev) => [...prev, newMessage]);
    const res = await wallet[cmd](params);
    console.log({ res });

    // 先清除广播的生交易
    setRawTxs([]);

    // 如果结果中具有未广播状态，将未广播的生交易放入 rawTxs
    if (
      typeof res === "object" &&
      res.hasOwnProperty("broadcasted") &&
      !res.broadcasted
    ) {
      for (const tx of res.res) {
        if (tx.hasOwnProperty("routeCheckTxHex")) {
          setRawTxs((prev) => [...prev, tx.routeCheckTxHex]);
        }
        if (tx.hasOwnProperty("txHex")) {
          setRawTxs((prev) => [...prev, tx.txHex]);
        }
      }
    }

    // 处理结果类型
    await printMessage(res);

    return res;
  };

  const printMessage = async (msg: object | boolean | string) => {
    if (typeof msg === "undefined") return;

    // 处理结果类型
    if (typeof msg === "object") {
      const resStr = JSON.stringify(msg);
      setConsoleMessages((prev) => [...prev, resStr]);
    } else if (typeof msg === "boolean") {
      const resStr = msg ? "OK" : "FALSE";
      setConsoleMessages((prev) => [...prev, resStr]);
    } else {
      setConsoleMessages((prev) => [...prev, msg]);
    }

    // 控制台滚动到底部
    const consoleEl = document.querySelector("#console");
    if (consoleEl) {
      consoleEl.scrollTop = consoleEl.scrollHeight;
    }
    // 等待 0.1 秒
    await new Promise((resolve) => setTimeout(resolve, 100));
    // 再滚动一次
    if (consoleEl) {
      consoleEl.scrollTop = consoleEl.scrollHeight;
    }
  };

  const transfer = async ({ caseIndex }: { caseIndex: number }) => {
    const chooseCase = cases[caseIndex];

    await command("transfer", {
      tasks: chooseCase.tasks,
      broadcast: chooseCase.broadcast,
    });
  };

  const callEciesDecrypt = async () => {
    // hello world
    await command("eciesDecrypt", {
      encrypted:
        "4249453102f09ef3517e9cea9e74b1a59588fe60f9b3afd3b5dd0b9343d36d945f004f0d08a6af2e608de2f40181e7aadd4edeb8021ca6cc1374f099e045741ee6fa01e77e8c5c41eb68f1f2c35e40b8741d0ab169",
    });
  };
  function getUnspentValue(tx: any) {
    const inputAmount = tx.inputs.reduce(
      (pre: number, cur: any) => cur.output.satoshis + pre,
      0
    );
    const outputAmount = tx.outputs.reduce(
      (pre: number, cur: any) => cur.satoshis + pre,
      0
    );

    let unspentAmount = inputAmount - outputAmount;
    return unspentAmount;
  }

  const createFirstTransaction = async () => {
    // 先创建一个交易
    const tx = new mvc.Transaction();
    const address = await command("getAddress");
    const { network } = await command("getNetwork");

    const utxo: {
      address: string;
      txid: string;
      outIndex: number;
      value: number;
    } = await command("getUtxos").then((utxos) => {
      // 返回最大的一个utxo
      const maxUtxo = utxos.reduce((prev: any, cur: any) => {
        if (cur.value > prev.value) {
          return cur;
        } else {
          return prev;
        }
      });

      return maxUtxo;
    });

    // const outputScript = mvc.Script.buildPublicKeyHashOut(utxo.address)
    // // @ts-ignore
    // const input = new mvc.Transaction.Input.PublicKeyHash({
    //   output: new mvc.Transaction.Output({
    //     script: outputScript,
    //     satoshis: utxo.value,
    //   }),
    //   prevTxId: utxo.txid,
    //   outputIndex: utxo.outIndex,
    //   script: mvc.Script.empty(),
    // })
    const outputScript = mvc.Script.buildPublicKeyHashOut(utxo.address);
    const input = new mvc.Transaction.Input({
      prevTxId: utxo.txid,
      outputIndex: utxo.outIndex,
      script: mvc.Script.empty(),
      output: new mvc.Transaction.Output({
        script: outputScript,
        satoshis: utxo.value,
      }),
    });
    tx.addInput(input);
    tx.addOutput(
      new mvc.Transaction.Output({
        script: new mvc.Script(new mvc.Address(address, network)),
        satoshis: 1000,
      })
    );

    const unlockSize =
      tx.inputs.filter((v: any) => v.output!.script.isPublicKeyHashOut())
        .length * 107;
    let fee = Math.ceil(tx.toBuffer().length + unlockSize + 62);

    let changeAmount = getUnspentValue(tx) - fee;
    if (changeAmount >= 546) {
      tx.addOutput(
        new mvc.Transaction.Output({
          script: new mvc.Script(new mvc.Address(address, network)),
          satoshis: changeAmount,
        })
      );
    }

    return {
      tx,
      address,
      outputScript,
      utxo,
    };
  };
  const addMoreTransaction = async (
    transactions: {
      txHex: string;
      address: string;
      inputIndex: number;
      scriptHex: string;
      satoshis: number;
    }[]
  ) => {
    const address = await command("getAddress");
    const { network } = await command("getNetwork");
    const newTx = new mvc.Transaction();
    const previousTx = new mvc.Transaction(
      transactions[transactions.length - 1].txHex
    );
    newTx.addInput(
      new mvc.Transaction.Input({
        prevTxId: previousTx.id,
        outputIndex: 1,
        script: mvc.Script.empty(),
        output: previousTx.outputs[1],
      })
    );
    newTx.addOutput(
      new mvc.Transaction.Output({
        script: new mvc.Script(new mvc.Address(address, network)),
        satoshis: 1000,
      })
    );
    const unlockSize =
      newTx.inputs.filter((v: any) => v.output!.script.isPublicKeyHashOut())
        .length * 107;
    let fee = Math.ceil(newTx.toBuffer().length + unlockSize + 62);

    let changeAmount = getUnspentValue(newTx) - fee;
    if (changeAmount >= 546) {
      newTx.addOutput(
        new mvc.Transaction.Output({
          script: new mvc.Script(new mvc.Address(address, network)),
          satoshis: changeAmount,
        })
      );
    }

    // push
    transactions.push({
      txHex: newTx.toString(),
      address,
      inputIndex: 0,
      scriptHex: previousTx.outputs[1].script.toHex(),
      satoshis: previousTx.outputs[1].satoshis,
    });

    return transactions;
  };

  const signTransaction = async () => {
    const { tx, address, outputScript, utxo } = await createFirstTransaction();

    // 签名
    const { signature: signatureInfo } = await command("signTransaction", {
      transaction: {
        txHex: tx.toString(),
        address,
        inputIndex: 0,
        scriptHex: outputScript.toHex(),
        satoshis: utxo.value,
      },
    });

    const pureSig = mvc.crypto.Signature.fromTxFormat(
      Buffer.from(signatureInfo.sig, "hex")
    );
    const signedScript = mvc.Script.buildPublicKeyHashIn(
      signatureInfo.publicKey,
      pureSig.toDER(),
      signatureInfo.sigtype
    );
    tx.inputs[0].setScript(signedScript);

    // 推入生交易列表
    setRawTxs((prev) => [...prev, tx.toString()]);
  };

  const previewTransaction = async () => {
    const { tx, address, outputScript, utxo } = await createFirstTransaction();

    await printMessage("> txid presigned:");
    await printMessage(tx.id);

    // 预览
    const { txid } = await command("previewTransaction", {
      transaction: {
        txHex: tx.toString(),
        address,
        inputIndex: 0,
        scriptHex: outputScript.toHex(),
        satoshis: utxo.value,
      },
    });

    await printMessage("> txid signed: ");
    await printMessage(txid);
  };

  const signTransactions = async () => {
    const { network } = await command("getNetwork");
    const {
      tx: tx0,
      address,
      outputScript,
      utxo,
    } = await createFirstTransaction();

    // const { txid } = await command('previewTransaction', {
    //   transaction: {
    //     txHex: tx0.toString(),
    //     address,
    //     inputIndex: 0,
    //     scriptHex: outputScript.toHex(),
    //     satoshis: utxo.value,
    //   },
    // })

    // 构建链式交易
    let transactions = [
      {
        txHex: tx0.toString(),
        address,
        inputIndex: 0,
        scriptHex: outputScript.toHex(),
        satoshis: utxo.value,
      },
    ];
    for (let i = 0; i < 10; i++) {
      transactions = await addMoreTransaction(transactions);
    }

    // 签名
    const { signedTransactions } = await command("signTransactions", {
      transactions,
    });

    // 推入生交易列表
    setRawTxs((prev) => [
      ...prev,
      ...signedTransactions.map((v: any) => v.txHex),
    ]);
  };

  const debugTransactions = async () => {
    const transactions = [
      {
        txHex:
          "0a00000003ad7de4bff79492278ec249995fafee94bbebb7970c69ec668a97253636501de10000000000ffffffff9b4eedf17e948bda6c619480b1b93bc7554d6ebab2520b0e4217e93bf79bacd200000000fd89254df6070a00000083c2d6e494a2e66860c0c0f25f934159b5033dd15dcc3cceab8edb4b7031d08b82a7d5bb59fc957ff7f737ca0b8be713c705d6173783ad5edb067819bed70be89b4eedf17e948bda6c619480b1b93bc7554d6ebab2520b0e4217e93bf79bacd200000000fd5707515301402097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0c6d657461636f6e74726163745679557985011455937601249376549376760114937601149376011493760114937601209376609376589376589376549376589376549376549376549376589376011493765393012f7976547f75777601007e81775a9d012e79aa0130797601247f75547f777788012f797601687f7700005279517f75007f7d7701fd87635379537f75517f777601007e8177537a757b7b5379535479937f75537f777b757c677601fe87635379557f75517f777601007e8177537a757b7b5379555479937f75557f777b757c677601ff87635379597f75517f777601007e8177537a757b7b5379595479937f75597f777b757c675379517f75007f777601007e8177537a757b7b5379515479937f75517f777b757c686868757777777682770131797601687f7501447f77776f756e011679940114937f7578011679947f77777701327901327901327901327901327901327956790133790133795379a8557988587901247f75587958795879587954795479aa7801207f75887601207f777601007e81775579607f755c7f777601007e8177567901707f7501507f775679827752790128959d5679a878885479827701209d557955797e76587955798b0128957f7555790128957f77886d6d6d6d755479557982776e8c7f757855947f777601007e817755936f947f75777777a976547954798b0114957f7554790114957f778854795479a9886d6d6d6d6d75012d798277012e797855947f75780119947f7d77567956796e6e5d79947f757777a9777788012f7952790119947f7552790141947f7d7757797682776e011a79940114937f7578011979947f77777788567956796e011d79940124937f7578011d79947f7777777601207f75012979aa8764577957790126796f755e79947f75787e70011f79947f777e77777776a80127798875685579012e79013079012b79012b79012b79012b7957790134790134790134790134795b7901207f755b79aa885a795a79557955795579557955795c7f75587f777601007e8177567901307f75607f77567952799f695579827752790128959d5579a878885479827701209d53798277549d547954797e53797e76577959798b0128957f7559790128957f77886d6d6d6d756f757e7656798764597959795979597954795479aa7801207f75887601207f777601007e81775579607f755c7f777601007e8177567901707f7501507f775679827752790128959d5679a878885479827701209d557955797e76587955798b0128957f7555790128957f77886d6d6d6d75686d6d6d6d6d6d75013779011d7978012379012379210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081001257956795679aa7676517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e817757795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff006e6e9776009f636e936776687777777b757c6e5296a0636e7c947b757c6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f77545379935279930130787e527e54797e58797e527e53797e52797e57797e777777777777777777777777765779ac777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776a4d0501c7c2d4f4ef948a6a375d3bbd75b55ba045cd00280000c16ff2862300000000000000000080c6130000000000000000003a3b14657c2506cdc9210000177e140ae901000000000000000000000000000000000000d960a54e9513038b69589056b9c4fbbb2d13e9a1fb4562eb8c3dcce50107d08545f15bf284f21f109864f6fdf2007527bee7eb8144a6981ac11579acad1b56e77a0bd7781d48f956b5b4541f58483496f92afa54f1cfcf3ba5368cb055b35c157a2899da9adced60cb9837a04ffa5e72c400000055bd6508e3324c3515ecdac6e7befa153b1a5a3339a2676f35b44dfc51125efa0000000001000000020000006d657461636f6e747261637403010000ff9ca91ad7b2230000fffffffff5167995fdf9f4a6e3ef80c008f8ea2adb4f93746d4c7fb98b7facf92aa0b7a400000000410000004c6cad7de4bff79492278ec249995fafee94bbebb7970c69ec668a97253636501de1000000009b4eedf17e948bda6c619480b1b93bc7554d6ebab2520b0e4217e93bf79bacd200000000ad7de4bff79492278ec249995fafee94bbebb7970c69ec668a97253636501de1010000004c700a0000000000000001000000020000005a4f12aab4cdafefbd909482e1950e0d902c28644031ab2df558c6ad4919e9038f4dec3127113579deebc7c9637d8607347ad3f66b4ca6206e2c311ede3ebdd7a783b7b9a244970523695df2db760b5922588c6dd88ddca00a280ebfad00a08f4c50dd120000000000008546ee5e76fb499212b7fd20d9b8efa2b8d01d956afea35234d51043e359a5b9bd5d000000000000af3b7de77dddd6a97ea4daa9489ff8cb450c690cd0b6b7cd6aadf3b61a5e7a9008dd12000000000000208546ee5e76fb499212b7fd20d9b8efa2b8d01d956afea35234d51043e359a5b94d72180176018801a901ac515301402097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0c6d657461636f6e74726163740114559376012493765493767601149376011493760114937601149376012093766093765893765893765493765893765493765493765493765893760114937653930113790124937601149376589376011493768b760114937601289302800176034d5643147db7ba9060d3ee9152736f73fe581310fd16725e14c7c2d4f4ef948a6a375d3bbd75b55ba045cd0028014679aa0148797601247f75547f7777880146798277016ca1690147797601687f7700005279517f75007f7d7701fd87635379537f75517f777601007e8177537a757b7b5379535479937f75537f777b757c677601fe87635379557f75517f777601007e8177537a757b7b5379555479937f75557f777b757c677601ff87635379597f75517f777601007e8177537a757b7b5379595479937f75597f777b757c675379517f75007f777601007e8177537a757b7b5379515479937f75517f777b757c686868757777777682776e55947f75780119947f77014979520124957f75510124957f77014579014579014579014979a8707058795479aa7801207f75887601207f777601007e81775579607f755c7f777601007e8177567901707f7501507f775679827752790128959d5679a878885479827701209d557955797e76587955798b0128957f7555790128957f77886d6d6d6d75014a7982775a79014c7952796e012c79940124937f7578012c79947f77a9777788014b795b79587952798277707c52796e013079940124937f7578013079947f77a977778878547952796e6e012079947f757777a97777885379000000000000000000005a797682776e012a799458937f7578012a79947f777601007e817777775a7a75597a597a597a597a597a597a597a597a597a5a797682776e012b799454937f7578012b79947f777601007e81777777597a75587a587a587a587a587a587a587a587a5a797682776e012c799454937f7578012c79947f777601007e81777777587a75577a577a577a577a577a577a577a5a797682776e012d799454937f7578012d79947f777601007e81777777577a75567a567a567a567a567a567a5a797682776e012e799458937f7578012e79947f777601007e81777777567a757171557a5a797682776e012f799454937f7578012f79947f777601007e81777777557a75547a547a547a547a5a797682776e0130799458937f7578013079947f777601007e81777777547a7572537a5a797682776e0131799458937f7578013179947f777601007e81777777537a757b7b5a797682776e0132799460937f7578013279947f777601007e817777777b757c5a797682776e013379940120937f7578013379947f7777777759795979597959795979597959795979597959795a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a7559795979597959795979597959795979597959795a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a755a7a75015579015a79510153790153790153790153790153790153790153790153790153790153790153790153790153790153790115790111797682776e014179940114937f7578014179947f7777777653795779577957795d795d795d795679a95879884f53007600a26976539f69946b6c766b796c78775279a069777657007600a26976539f69946b6c766b796c750134796e8b80767682778c7f75007f77777777597952798b0114957f7552790114957f7778a9886d53517600a26976539f69946b6c766b796c78775279a069777657517600a26976539f69946b6c766b796c750134796e8b80767682778c7f75007f77777777597952798b0114957f7552790114957f7778a9886d53527600a26976539f69946b6c766b796c78775279a069777657527600a26976539f69946b6c766b796c750134796e8b80767682778c7f75007f77777777597952798b0114957f7552790114957f7778a9886d6d6d6d6d750111790111798b0124957f750111790124957f7d77a95779577957790114790114790114790114790114790114790114795a795a795a795a795a795a795a795a795a795a795a795a795779012f7f75012c7f77014179885779012f7f777888005b007600a26976539f69946b6c766b796c7555007600a26976539f69946b6c766b796c7559007600a26976539f69946b6c766b796c755b79787e76a87676a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7701007e8177775279537995547997785579979c6354798b557a75547a547a547a547a547975686d6d5b517600a26976539f69946b6c766b796c7555517600a26976539f69946b6c766b796c7559517600a26976539f69946b6c766b796c755b79787e76a87676a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7701007e8177775279537995547997785579979c6354798b557a75547a547a547a547a547975686d6d5b527600a26976539f69946b6c766b796c7555527600a26976539f69946b6c766b796c7559527600a26976539f69946b6c766b796c755b79787e76a87676a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7778a87e7d7701007e8177775279537995547997785579979c6354798b557a75547a547a547a547a547975686d6d76539d6d6d6d6d6d6d5779587f75547f777601007e81777777777777777777777777765579a269777777777777777777777777777777777777777777015879015a79ad015979a9014479000000000000005779547f757601007e8177577a75567a567a567a567a567a567a5679009d577901187f75547f77567a757171557a577901207f7501187f777601007e8177557a75547a547a547a547a577901307f7501207f7781547a7572537a577901447f7501307f77537a757b7b5779014c7f7501447f777601007e81777b757c57798277014ca0635779014c7f7777685679567956795679567956795679577a75577a75577a75577a75577a75577a75577a75577a755579587987645779011d798868015f7900a0695479016079a2690112790112790112790112790112790112790112790112790112790112790112795279557900a063785779a067006863785b79a067006863785a79a357795c79a46e945379785c79956079955a799693547a7572537a53796d6d6877777777777777777777775d7901617994567901627994577a75567a567a567a567a567a567a56797555790162795379950116799694567a757171557a5579755a790161797682776e0134799454937f7578013479947f777601007e81777777935979597959795979597959795979016979587958795879587958795879587958795679546e8b80767682778c7f75007f7777777756797e5579586e8b80767682778c7f75007f777777777e547960807e53797e5279586e8b80767682778c7f75007f777777777e787e777777777777776e7c546e8b80767682778c7f75007f777777777e5379586e8b80767682778c7f75007f777777777e77777777777777777777014f79a878a80150796079705379000121950121937f75000121950120937f77815479000121950120937f75000121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379510121950121937f75510121950120937f77815479510121950120937f75510121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379520121950121937f75520121950120937f77815479520121950120937f75520121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379530121950121937f75530121950120937f77815479530121950120937f75530121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379540121950121937f75540121950120937f77815479540121950120937f75540121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379550121950121937f75550121950120937f77815479550121950120937f75550121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379560121950121937f75560121950120937f77815479560121950120937f75560121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379570121950121937f75570121950120937f77815479570121950120937f75570121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379580121950121937f75580121950120937f77815479580121950120937f75580121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379590121950121937f75590121950120937f77815479590121950120937f75590121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795a0121950121937f755a0121950120937f778154795a0121950120937f755a0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795b0121950121937f755b0121950120937f778154795b0121950120937f755b0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795c0121950121937f755c0121950120937f778154795c0121950120937f755c0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795d0121950121937f755d0121950120937f778154795d0121950120937f755d0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795e0121950121937f755e0121950120937f778154795e0121950120937f755e0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d53795f0121950121937f755f0121950120937f778154795f0121950120937f755f0121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d5379600121950121937f75600121950120937f77815479600121950120937f75600121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901110121950121937f7501110121950120937f7781547901110121950120937f7501110121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901120121950121937f7501120121950120937f7781547901120121950120937f7501120121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901130121950121937f7501130121950120937f7781547901130121950120937f7501130121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901140121950121937f7501140121950120937f7781547901140121950120937f7501140121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901150121950121937f7501150121950120937f7781547901150121950120937f7501150121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901160121950121937f7501160121950120937f7781547901160121950120937f7501160121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d537901170121950121937f7501170121950120937f7781547901170121950120937f7501170121957f777892635379787ea8547a7572537a5279787ea8537a757b7b677654797ea8547a7572537a7653797ea8537a757b7b686d7853798877777777776079016579930164795f79567953795979567955798277567978013e79947f755679546e8b80767682778c7f75007f777777777e5579586e8b80767682778c7f75007f777777777e5479586e8b80767682778c7f75007f777777777e5379606e8b80767682778c7f75007f777777777e52797e57795279014379940120937f777e777777777777770162797601007e81776e7658805279768277007802fd009f6378516e8b80767682778c7f75007f77777777776778030000019f6301fd5279526e8b80767682778c7f75007f777777777e7767780500000000019f6301fe5279546e8b80767682778c7f75007f777777777e776778090000000000000000019f6301ff5279586e8b80767682778c7f75007f777777777e77686868687653797e7777777e777701517901537900527900a063780153790152797e01147e787e0153797e0151797e777654797658805279768277007802fd009f6378516e8b80767682778c7f75007f77777777776778030000019f6301fd5279526e8b80767682778c7f75007f777777777e7767780500000000019f6301fe5279546e8b80767682778c7f75007f777777777e776778090000000000000000019f6301ff5279586e8b80767682778c7f75007f777777777e77686868687653797e7777777e7777777768777700015279827700a063015279527f75007f7702006a88015279007658805279768277007802fd009f6378516e8b80767682778c7f75007f77777777776778030000019f6301fd5279526e8b80767682778c7f75007f777777777e7767780500000000019f6301fe5279546e8b80767682778c7f75007f777777777e776778090000000000000000019f6301ff5279586e8b80767682778c7f75007f777777777e77686868687653797e7777777e777777685279787e52797e76aa0170797682776e58947f75780128947f77777788016f7976014d79014d79210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce0810014f79015579015479855679aa7676517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e817757795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff006e6e9776009f636e936776687777777b757c6e5296a0636e7c947b757c6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f77545379935279930130787e527e54797e58797e527e53797e52797e57797e777777777777777777777777ab765779ac77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776a4144a6981ac11579acad1b56e77a0bd7781d48f956b5b4541f58483496f92afa54f1cfcf3ba5368cb008c16b3e5bee0b33ff414e82aa4236d43748efc93d000000ff4ca0bdd80685b45bc4e97c366104b1a20be4e0277ffc2a06b8a29feb87bd4684cb080b9de4ddbd16e8146741ba92787d0e2dc22e44ef88c09993553490c37fb832260f981be98bcba40f4279c87ecdbfa6914a90483a3148d7be4bfdd1a755dfc3e6d2d7acdbb8e389a9e249c19a23a310786212608b76c35de20088594da7c264557021a372200c586ae29ce5e6206602979d6960403533179184f86a1f729beb0653514c700a00000000000000040000000300000020205476232de989b3e1538c4d1b2f602476bf5c5e0e16be3b1c2ab765378aa0ca73076167388d75e5d79f768f75a63af07805e6009747ace97a801032a7706870b2a70185096de2855344341ac1de613e0b3b091435a1995d2ca190a3b0390a4ca00e8f05c2c4881a2da14d9228bf9db80432f7e526a8d8262c21da5969381e0b4800000000fffffffff2fc8d0dce4315915effc125bf111276aa18d22fb1bbc1f033c42bb4d917ed6000000000ffffffffa419559206f2b8c6df3110db94c6db30f203d696bea1cae2dc302a229087c10b01000000ffffffff0e8f05c2c4881a2da14d9228bf9db80432f7e526a8d8262c21da5969381e0b4801000000ffffffff20f2fc8d0dce4315915effc125bf111276aa18d22fb1bbc1f033c42bb4d917ed60040000000004ffffffff4c700a0000000000000004000000030000005f0cd390fb91492f219b4642e97f85a552f2d63ee9137bfba24792dc5f7813e019490a9c0897767e17d60ebcc02e611edd0ab830c0b9d5b77d9d15401fe9f487fd03de377cc133885a38def2928c6667da9ab19111a81b480bccf322890dd3da4c789ca91ad7b2230000399f76cba3540117d9a138a4388e12631e9247af9f56e7ab4852ac4a5d6178cb980500000000000053131c680cd0bebbf688b7f6ad612a0bff8ea1e625a249f93105eef335a071dfee26000000000000584e3b2137efee6d3a16c728bee330674e4f22dded519ef872a2bff33369989b089ca91ad7b223000020399f76cba3540117d9a138a4388e12631e9247af9f56e7ab4852ac4a5d6178cb4cc4c7c2d4f4ef948a6a375d3bbd75b55ba045cd00280000c16ff2862300000000000000000080c6130000000000000000003a3b14657c2506cdc9210000177e140ae901000000000000000000000000000000000000d960a54e9513038b69589056b9c4fbbb2d13e9a1fb4562eb8c3dcce50107d08545f15bf284f21f109864f6fdf2007527bee7eb8144a6981ac11579acad1b56e77a0bd7781d48f956b5b4541f58483496f92afa54f1cfcf3ba5368cb055b35c157a2899da9adced60cb9837a04ffa5e72ffffffffad7de4bff79492278ec249995fafee94bbebb7970c69ec668a97253636501de1010000008a47304402205743daed092bea65cbdb57e39e8a56b19d4a0656b748cd28cf8f34a17e4bea7202204202f4d39ba2eededb1e6414243ec4ddb813ea6c694aedb9e02cfb7558171b5b4141040e9dda04267e1f3ef333906337c129b03f91e430cec7755cfc0c8b1917240db52e959446c76df7b711053c4307bae7927b49b35b330f33aaa3ab50da9831492fffffffff029ca91ad7b2230000fd5707515301402097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0c6d657461636f6e74726163745679557985011455937601249376549376760114937601149376011493760114937601209376609376589376589376549376589376549376549376549376589376011493765393012f7976547f75777601007e81775a9d012e79aa0130797601247f75547f777788012f797601687f7700005279517f75007f7d7701fd87635379537f75517f777601007e8177537a757b7b5379535479937f75537f777b757c677601fe87635379557f75517f777601007e8177537a757b7b5379555479937f75557f777b757c677601ff87635379597f75517f777601007e8177537a757b7b5379595479937f75597f777b757c675379517f75007f777601007e8177537a757b7b5379515479937f75517f777b757c686868757777777682770131797601687f7501447f77776f756e011679940114937f7578011679947f77777701327901327901327901327901327901327956790133790133795379a8557988587901247f75587958795879587954795479aa7801207f75887601207f777601007e81775579607f755c7f777601007e8177567901707f7501507f775679827752790128959d5679a878885479827701209d557955797e76587955798b0128957f7555790128957f77886d6d6d6d755479557982776e8c7f757855947f777601007e817755936f947f75777777a976547954798b0114957f7554790114957f778854795479a9886d6d6d6d6d75012d798277012e797855947f75780119947f7d77567956796e6e5d79947f757777a9777788012f7952790119947f7552790141947f7d7757797682776e011a79940114937f7578011979947f77777788567956796e011d79940124937f7578011d79947f7777777601207f75012979aa8764577957790126796f755e79947f75787e70011f79947f777e77777776a80127798875685579012e79013079012b79012b79012b79012b7957790134790134790134790134795b7901207f755b79aa885a795a79557955795579557955795c7f75587f777601007e8177567901307f75607f77567952799f695579827752790128959d5579a878885479827701209d53798277549d547954797e53797e76577959798b0128957f7559790128957f77886d6d6d6d756f757e7656798764597959795979597954795479aa7801207f75887601207f777601007e81775579607f755c7f777601007e8177567901707f7501507f775679827752790128959d5679a878885479827701209d557955797e76587955798b0128957f7555790128957f77886d6d6d6d75686d6d6d6d6d6d75013779011d7978012379012379210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081001257956795679aa7676517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e817757795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff006e6e9776009f636e936776687777777b757c6e5296a0636e7c947b757c6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f77545379935279930130787e527e54797e58797e527e53797e52797e57797e777777777777777777777777765779ac777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776a4d0501c7c2d4f4ef948a6a375d3bbd75b55ba045cd00280000c16ff2862300000000000000000080c6130000000000000000003a3b14658cdb03cdc921000007c8160ae901000000000000000000000000000000000000c7c8dec4d8b127d90d4ce58e31e4ddfb8d1fc2610f78abe5bb1792e0a934fce745f15bf284f21f109864f6fdf2007527bee7eb8144a6981ac11579acad1b56e77a0bd7781d48f956b5b4541f58483496f92afa54f1cfcf3ba5368cb055b35c157a2899da9adced60cb9837a04ffa5e72c400000055bd6508e3324c3515ecdac6e7befa153b1a5a3339a2676f35b44dfc51125efa0000000001000000020000006d657461636f6e747261637403010000ffed260000000000001976a914e9233c92b199b4b616eeec75d7554edc911f6d1288ac00000000",
        inputIndex: 0,
        scriptHex:
          "",
        satoshis: 4829,
      },
    ];
    const tx = new mvc.Transaction(transactions[0].txHex);
    const prevTxIds = tx.inputs.map((v: any) => v.prevTxId.toString("hex"));
    console.log({ tx, prevTxIds });
    return;

    // 签名
    const { signedTransactions } = await command("signTransactions", {
      transactions,
    });

    // 推入生交易列表
    setRawTxs((prev) => [
      ...prev,
      ...signedTransactions.map((v: any) => v.txHex),
    ]);
    return;

    const tx0 = new mvc.Transaction(transactions[0].txHex);
    const txid0 = new mvc.Transaction(transactions[0].txHex).id;
    const tx1 = new mvc.Transaction(transactions[1].txHex);
    const txid1 = new mvc.Transaction(transactions[1].txHex).id;
    console.log({ txid1 });
    const utxo = tx0.outputs[0];
    const addressFromUtxo = utxo.script.toAddress().toString();
    console.log({ addressFromUtxo });
    tx1.removeInput(txid0, 0);
    tx1.addInput(
      new mvc.Transaction.Input({
        prevTxId: txid0,
        outputIndex: 0,
        script: mvc.Script.empty(),
        output: tx0.outputs[0],
      })
    );
    console.log({ skewed: tx1.id });

    // change script
  };

  const tryBroadcast = async (rawTx: string) => {
    const res = await fetch("https://mainnet.mvcapi.com/tx/broadcast", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        hex: rawTx,
      }),
    }).then((res) => res.json());
    const txid = res.txid;
    const newMessage = "txid: " + txid;
    setConsoleMessages((prev) => [...prev, newMessage]);

    // 控制台滚动到底部
    const consoleEl = document.querySelector("#console");
    if (consoleEl) {
      consoleEl.scrollTop = consoleEl.scrollHeight;
    }
    // 等待 0.1 秒
    await new Promise((resolve) => setTimeout(resolve, 100));
    // 再滚动一次
    if (consoleEl) {
      consoleEl.scrollTop = consoleEl.scrollHeight;
    }
  };

  const [showTransfer, setShowTransfer] = useState(true);

  return (
    <main className="flex min-h-screen items-center justify-center">
      <div className="h-dvh lg:h-[80vh] lg:aspect-[1.4] lg:mor-shadow lg:rounded-xl p-4 lg:p-8 lg:grid lg:grid-cols-2 gap-4">
        <div className="col-span-1 flex flex-col lg:overflow-y-hidden h-1/2 lg:h-auto ">
          <div className="flex justify-between items-center flex-wrap pt-4 gap-4">
            <div className="flex justify-start items-center px-4 gap-4 flex-wrap">
              {/* 广播按钮 */}
              {rawTxs.length > 0 &&
                rawTxs.map((rawTx, index) => (
                  <button
                    className="px-4 h-6 mor-shadow-sm font-medium text-gray-500 rounded-full text-xs flex items-center justify-center"
                    onClick={() => tryBroadcast(rawTx)}
                    key={index}
                  >
                    {t("broadcast") + " " + (index + 1)}
                  </button>
                ))}

              {/* 清除待广播按钮 */}
              {rawTxs.length > 0 && (
                <button
                  className="px-4 h-6 mor-shadow-sm font-medium text-gray-500 rounded-full text-xs flex items-center justify-center"
                  onClick={() => setRawTxs([])}
                >
                  {t("clearTx")}
                </button>
              )}
            </div>

            <div className="flex justify-end px-4 gap-x-4">
              {/* 切换语言 */}
              <Link
                href={theOtherPath}
                className="w-16 h-6 mor-shadow-sm font-medium text-gray-500 rounded-full text-xs flex items-center justify-center"
              >
                {theOther}
              </Link>

              {/* 清空按钮 */}
              <button
                className="w-16 h-6 mor-shadow-sm font-medium text-gray-500 rounded-full text-xs flex items-center justify-center"
                onClick={() => clearConsole()}
              >
                {t("clear")}
              </button>
            </div>
          </div>

          {/* 控制台 */}
          <div
            className="mor-inner rounded-xl p-4 text-gray-400 text-sm overflow-y-scroll mt-4 grow"
            id="console"
          >
            {consoleMessages.map((msg, i) => (
              <p
                key={i}
                className={
                  msg.startsWith(">")
                    ? "text-gray-400 mt-4 break-all"
                    : "break-all text-indigo-700"
                }
              >
                {msg}
              </p>
            ))}
          </div>
        </div>

        {/* 操作面板 */}
        <div className="col-span-1 overflow-y-auto px-4 pb-4 h-1/2 lg:h-auto pt-2 lg:pt-0">
          <h3 className="title col-span-3">{t("connect")}</h3>
          <div className="mt-4 grid grid-cols-3 gap-4">
            <button className="btn" onClick={() => command("connect")}>
              test auto deploy
            </button>
            <button className="btn" onClick={() => command("connect")}>
              {t("connect")}
            </button>
            <button className="btn" onClick={() => command("disconnect")}>
              {t("disconnect")}
            </button>
            <button className="btn" onClick={() => command("isConnected")}>
              {t("isConnected")}
            </button>
            <button className="btn" onClick={() => command("getNetwork")}>
              {t("getNetwork")}
            </button>
            <button className="btn" onClick={() => command("switchNetwork")}>
              {t("switchNetwork")}
            </button>
          </div>

          <h3 className="title col-span-3 mt-8">{t("account")}</h3>
          <div className="mt-4 grid grid-cols-3 gap-4">
            <button className="btn" onClick={() => command("getAddress")}>
              {t("getAddress")}
            </button>
            <button
              className="btn"
              onClick={() => command("getAddress", { path: "0/2" })}
            >
              {t("getAddress") + " 0/2"}
            </button>
            <button className="btn" onClick={() => command("getPublicKey")}>
              {t("getPublicKey")}
            </button>
            <button
              className="btn"
              onClick={() => command("getPublicKey", { path: "0/2" })}
            >
              {t("getPublicKey") + " 0/2"}
            </button>
            <button className="btn" onClick={() => command("getXPublicKey")}>
              {t("getXPublicKey")}
            </button>
            <button className="btn" onClick={() => command("getBalance")}>
              {t("getBalance")}
            </button>
            <button className="btn" onClick={() => command("getUtxos")}>
              {t("getUtxos")}
            </button>
            <button className="btn" onClick={() => command("merge")}>
              {t("merge")}
            </button>
          </div>

          <h3 className="title col-span-3 mt-8">{t("encryption")}</h3>
          <div className="mt-4 grid grid-cols-3 gap-4">
            <button
              className="btn"
              onClick={() =>
                command("eciesEncrypt", {
                  message: "hello world",
                })
              }
            >
              {t("eciesEncrypt")}
            </button>
            <button className="btn" onClick={callEciesDecrypt}>
              {t("eciesDecrypt")}
            </button>
            <button className="btn" onClick={previewTransaction}>
              {t("previewTransaction")}
            </button>
            <button className="btn" onClick={signTransaction}>
              {t("signTransaction")}
            </button>
            <button className="btn" onClick={signTransactions}>
              {t("signTransactions")}
            </button>
            <button className="btn" onClick={debugTransactions}>
              {t("debugTransactions")}
            </button>
            <button
              className="btn"
              onClick={() => command("signMessage", { message: "Hello World" })}
            >
              {t("signMessage")}
            </button>
          </div>

          <h3 className="title col-span-3 mt-8 flex items-center justify-between">
            <span>{t("transfer")}</span>
            <button
              className="rounded-full text-xs text-gray-500 py-1 px-4 mor-shadow-sm font-medium"
              onClick={() => setShowTransfer((prev) => !prev)}
            >
              {showTransfer ? t("collapse") : t("expand")}
            </button>
          </h3>
          {showTransfer && (
            <div className="mt-4 grid grid-cols-2 gap-4">
              {cases.map((c, i) => (
                <button
                  className={`btn col-span-1 !text-xs p-2 h-20 !rounded-2xl break-all ${
                    c.disabled && "muted"
                  }`}
                  disabled={c.disabled}
                  key={i}
                  onClick={() => transfer({ caseIndex: i })}
                >
                  {c.name}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    </main>
  );
}
